DEFAULT=default

FELIX_HOME=/opt/felix-framework-3.2.2/
FELIX_BIN=$(FELIX_HOME)bin/
FELIX_BUNDLE=$(FELIX_HOME)bundle/
FELIX_CACHE=$(FELIX_HOME)felix-cache/
FELIX_MAIN_CLASS=org.apache.felix.main.Main

LOCAL_BUNDLE_LIST=drools-core-5.1.1.jar
BUNDLE_DIR=/tmp/plugins/

JARS_PATH=lib/
EXT_JARS_PATH=externallib/

$(DEFAULT) : runfelix 

deployandrun : deploy runfelix  

runfelix : EXT_JAR_LIST:=$(shell ls $(EXT_JARS_PATH))  
runfelix : CLASSPATH_TMP_FILE:=$(shell mktemp)  
runfelix : TMP_FILE:=$(shell mktemp)  
runfelix : 	
	for I in `ls $(FELIX_BIN)*.jar`; do echo "$$I" >> $(CLASSPATH_TMP_FILE); done
	for I in `ls $(JARS_PATH)*.jar`; do echo "$$I" >> $(CLASSPATH_TMP_FILE); done
	L=`echo "$(EXT_JAR_LIST)"`; for E in $(LOCAL_BUNDLE_LIST); do L=`echo "$$L" | sed "s/\b$$E\b//g"`; done; echo $$L>$(TMP_FILE);
	for I in `cat $(TMP_FILE)`; do echo "$(EXT_JARS_PATH)$$I" >> $(CLASSPATH_TMP_FILE); done   
	cat $(CLASSPATH_TMP_FILE) | tr "\n" ":" | tr " " ":" > $(TMP_FILE) 
	sed 's/:$$//' $(TMP_FILE) > $(CLASSPATH_TMP_FILE);
	java -cp `cat $(CLASSPATH_TMP_FILE)` $(FELIX_MAIN_CLASS) $(FELIX_CACHE)
	 	
deploy : 
	cp $(BUNDLE_DIR)* $(FELIX_BUNDLE) 
	cp $(LOCAL_BUNDLE_LIST) $(FELIX_BUNDLE) 
	
all : binary sources axis2modules_binary axis2modules_sources

nekton : tas3
	mkdir $(TARGETPATH)/$(TAS3COMPONENT)/Conf
	cp -R $(ROLECASTPATH)/Conf/NOTDemo $(TARGETPATH)/$(TAS3COMPONENT)/Conf
	cp -R $(ROLECASTPATH)/Conf/*.properties $(TARGETPATH)/$(TAS3COMPONENT)/Conf
	cp -R $(ROLECASTPATH)/Conf/Axis2/client.axis2.xml $(TARGETPATH)/$(TAS3COMPONENT)/Conf
	mkdir $(TARGETPATH)/$(TAS3COMPONENT)/Conf/modules
	cp $(TARGETPATH)/$(TAS3COMPONENT)/$(TAS3MODULESDIR)/*.mar $(TARGETPATH)/$(TAS3COMPONENT)/Conf/modules 
	cp -R $(ROLECASTPATH)/Conf/*Keystore* $(TARGETPATH)/$(TAS3COMPONENT)/Conf
	mkdir $(TARGETPATH)/$(TAS3COMPONENT)/bin
	for i in `ls $(BINPATH)/*.class`; do cp $$i $(TARGETPATH)/$(TAS3COMPONENT)/bin; done
	mkdir $(TARGETPATH)/$(TAS3COMPONENT)/bin/zxidjava
	for i in `ls $(ROLECASTPATH)/lib/T3-ZXID/CurrentVersion/T3-ZXID-LINUX-X86/zxidjava/*.class`; do cp $$i $(TARGETPATH)/$(TAS3COMPONENT)/bin/zxidjava; done
	mkdir $(TARGETPATH)/$(TAS3COMPONENT)/libs
	for i in `grep "kind=\"lib\"" $(ROLECASTPATH)/.classpath | sed "s/<cl.* path=\"//g" | sed "s/\".*\/>//g"`; do cp $$i $(TARGETPATH)/$(TAS3COMPONENT)/libs; done;
	mkdir $(TARGETPATH)/$(TAS3COMPONENT)/dlibs
	mkdir $(TARGETPATH)/$(TAS3COMPONENT)/dlibs/zxidjava
	cp $(ROLECASTPATH)/lib/T3-ZXID/CurrentVersion/T3-ZXID-LINUX-X86/zxidjava/*.so $(TARGETPATH)/$(TAS3COMPONENT)/dlibs/zxidjava
	cd $(TARGETPATH); zip -r $(TAS3COMPONENT).zip $(TAS3COMPONENT)

tas3 : binary sources axis2modules_binary axis2modules_sources  
	rm -rf $(TARGETPATH)/$(TAS3COMPONENT)
	mkdir $(TARGETPATH)/$(TAS3COMPONENT)
	mkdir $(TARGETPATH)/$(TAS3COMPONENT)/$(TAS3MODULESDIR)
	mv $(SRCFILE) $(TARGETPATH)/$(TAS3COMPONENT)
	mv $(JARFILE) $(TARGETPATH)/$(TAS3COMPONENT)
	mv $(SRCZXIDMOULEFILE) $(TARGETPATH)/$(TAS3COMPONENT)/$(TAS3MODULESDIR)
	mv $(SRCRESPONSEPARSERMOULEFILE) $(TARGETPATH)/$(TAS3COMPONENT)/$(TAS3MODULESDIR)
	mv $(SRCCORRUPTIONMOULEFILE) $(TARGETPATH)/$(TAS3COMPONENT)/$(TAS3MODULESDIR)
	cp 	$(ZXIDMOULEFILE) $(TARGETPATH)/$(TAS3COMPONENT)/$(TAS3MODULESDIR)
	cp 	$(RESPONSEPARSERMOULEFILE) $(TARGETPATH)/$(TAS3COMPONENT)/$(TAS3MODULESDIR)
	cp 	$(CORRUPTIONMOULEFILE) $(TARGETPATH)/$(TAS3COMPONENT)/$(TAS3MODULESDIR)
	cp  $(LICENCESPATH)/$(GPL)  $(LICENCESPATH)/$(LGPL) $(TARGETPATH)/$(TAS3COMPONENT)
	cp $(MANIFESTPATH)/$(TAS3MANIFEST) $(TARGETPATH)/$(TAS3COMPONENT)
	cp -R $(ACCESSRESULTXMLTYPESDIR) $(TARGETPATH)/$(TAS3COMPONENT)/$(ACCESSRESULTXMLTYPESNAME)
	rm -Rf `find $(TARGETPATH)/$(TAS3COMPONENT)/$(ACCESSRESULTXMLTYPESNAME) -type d -name "CVS"`
	cp -R $(TESTCASEREPOXMLTYPESDIR) $(TARGETPATH)/$(TAS3COMPONENT)/$(TESTCASEREPOXMLTYPESNAME)
	rm -Rf `find $(TARGETPATH)/$(TAS3COMPONENT)/$(TESTCASEREPOXMLTYPESNAME) -type d -name "CVS"`
	cp -R $(TESTRESULTXMLTYPESDIR) $(TARGETPATH)/$(TAS3COMPONENT)/$(TESTRESULTXMLTYPESNAME)
	rm -Rf `find $(TARGETPATH)/$(TAS3COMPONENT)/$(TESTRESULTXMLTYPESNAME) -type d -name "CVS"`
	mv $(TARGETPATH)/$(TAS3COMPONENT)/$(TAS3MANIFEST) $(TARGETPATH)/$(TAS3COMPONENT)/Manifest
	cd $(TARGETPATH); zip -r $(TAS3COMPONENT).zip $(TAS3COMPONENT)

zxid_release : axis2zxidmodule_binary_apache_licence axis2zxidmodule_sources_apache_licence
	rm -rf $(TARGETPATH)/$(ZXIDMODULEDIRZXIDRELEASE)
	mkdir $(TARGETPATH)/$(ZXIDMODULEDIRZXIDRELEASE)
	mv $(SRCZXIDMOULEFILE) $(TARGETPATH)/$(ZXIDMODULEDIRZXIDRELEASE)
	cp $(ZXIDMOULEFILE) $(TARGETPATH)/$(ZXIDMODULEDIRZXIDRELEASE)
	cp $(LICENCESPATH)/$(APACHELICENCE)  $(TARGETPATH)/$(ZXIDMODULEDIRZXIDRELEASE)
	cd $(TARGETPATH); zip -r $(ZXIDMODULEDIRZXIDRELEASE).zip $(ZXIDMODULEDIRZXIDRELEASE)

#axis2service : 
#	jar cvf $(JARFILE) -C $(BINPATH) $(PACKAGENAME) -C $(LICENCESPATH) $(GPL) -C $(LICENCESPATH) $(LGPL)

axis2modules_binary : 
# GENERO I MODULI E LI METTO RISPETTIVAMENTE IN $(ZXIDMOULEFILE) $(RESPONSEPARSERMOULEFILE) $(CORRUPTIONMOULEFILE)
	jar cvf $(ZXIDMOULEFILE) -C $(BINPATH) $(ZXIDMODULEPACKAGENAME) -C $(LICENCESPATH) $(GPL) -C $(LICENCESPATH) $(LGPL) -C $(SRCZXIDMODULEPATH) $(AXIS2MODULEFILENAME)
	jar cvf $(RESPONSEPARSERMOULEFILE) -C $(BINPATH) $(RESPONSEPARSERMODULEPACKAGENAME) -C $(LICENCESPATH) $(GPL) -C $(LICENCESPATH) $(LGPL) -C $(SRCRESPONSEPARSERMODULEPATH) $(AXIS2MODULEFILENAME)  
	jar cvf $(CORRUPTIONMOULEFILE) -C $(BINPATH) $(CORRUPTIONMODULEPACKAGENAME) -C $(LICENCESPATH) $(GPL) -C $(LICENCESPATH) $(LGPL) -C $(SRCCORRUPTIONMODULEPATH) $(AXIS2MODULEFILENAME)

axis2modules_sources : 
# METTO I SORGENTI RISPETTIVAMENTE IN $(SRCZXIDMOULEFILE) $(SRCRESPONSEPARSERMOULEFILE) $(SRCCORRUPTIONMOULEFILE)
	tar -zcvf $(SRCZXIDMOULEFILE) -C $(SRCZXIDMODULEPATH) --exclude="*CVS*" --exclude="*.cvsignore" $(ZXIDMODULEPACKAGENAME) -C $(LICENCESPATH) $(GPL) -C $(LICENCESPATH) $(LGPL) -C $(SRCZXIDMODULEPATH) $(AXIS2MODULEFILENAME)
	tar -zcvf $(SRCRESPONSEPARSERMOULEFILE) -C $(SRCRESPONSEPARSERMODULEPATH) --exclude="*CVS*" --exclude="*.cvsignore" $(RESPONSEPARSERMODULEPACKAGENAME) -C $(LICENCESPATH) $(GPL) -C $(LICENCESPATH) $(LGPL) -C $(SRCRESPONSEPARSERMODULEPATH) $(AXIS2MODULEFILENAME)
	tar -zcvf $(SRCCORRUPTIONMOULEFILE) -C $(SRCCORRUPTIONMODULEPATH) --exclude="*CVS*" --exclude="*.cvsignore" $(CORRUPTIONMODULEPACKAGENAME) -C $(LICENCESPATH) $(GPL) -C $(LICENCESPATH) $(LGPL) -C $(SRCCORRUPTIONMODULEPATH) $(AXIS2MODULEFILENAME)

axis2zxidmodule_binary_apache_licence : 
# GENERO I MODULI E LI METTO RISPETTIVAMENTE IN $(ZXIDMOULEFILE) $(RESPONSEPARSERMOULEFILE) $(CORRUPTIONMOULEFILE)
	jar cvf $(ZXIDMOULEFILE) -C $(BINPATH) $(ZXIDMODULEPACKAGENAME) -C $(LICENCESPATH) $(APACHELICENCE) -C $(SRCZXIDMODULEPATH) $(AXIS2MODULEFILENAME)

axis2zxidmodule_sources_apache_licence : 
# METTO I SORGENTI RISPETTIVAMENTE IN $(SRCZXIDMOULEFILE) $(SRCRESPONSEPARSERMOULEFILE) $(SRCCORRUPTIONMOULEFILE)
	tar -zcvf $(SRCZXIDMOULEFILE) -C $(SRCZXIDMODULEPATH) --exclude="*CVS*" --exclude="*.cvsignore" $(ZXIDMODULEPACKAGENAME) -C $(LICENCESPATH) $(APACHELICENCE) -C $(SRCZXIDMODULEPATH) $(AXIS2MODULEFILENAME)

axis2modules_clean :
	rm $(ZXIDMOULEFILE)
	rm $(RESPONSEPARSERMOULEFILE)
	rm $(CORRUPTIONMOULEFILE)

binary : RANDOMDIR1:=$(shell mktemp -d)
binary : RANDOMDIR2:=$(shell mktemp -d)
binary :
	mv $(BINPATH)/$(ZXIDPACKAGENAME) $(RANDOMDIR1)
	mv $(BINPATH)/$(RESPONSEPARSERPACKAGENAME) $(RANDOMDIR2)
#	echo "-C $(CONFPATH) $(DEFAULTAXIS2CONFFILE)"
	jar cvf $(JARFILE) -C $(BINPATH) $(PACKAGENAME) -C $(LICENCESPATH) $(GPL) -C $(LICENCESPATH) $(LGPL) -C $(CONFPATH) $(DEAFULTLOGPROPERTIES) -C $(CONFPATH) $(DEFAULTAXIS2CONFFILE)
	mv $(RANDOMDIR1)/* $(BINPATH)/$(PACKAGENAME)
	mv $(RANDOMDIR2)/* $(BINPATH)/$(PACKAGENAME)
	rm -Rf $(RANDOMDIR1)
	rm -Rf $(RANDOMDIR2)
	
sources : 
	tar -zcvf $(SRCFILE) -C $(SRCPATH) --exclude="*CVS*" --exclude="*.cvsignore" $(PACKAGENAME) -C $(LICENCESPATH) $(GPL) -C $(LICENCESPATH) $(LGPL) -C $(CONFPATH) $(DEAFULTLOGPROPERTIES) -C $(CONFPATH) $(DEFAULTAXIS2CONFFILE)
