import it.cnr.isti.labse.cmb.event.SimpleEvent;
import it.cnr.isti.labse.cmb.settings.DebugMessages;
import java.util.List;
import it.cnr.isti.labse.cmb.settings.DroolsUtils;

declare SimpleEvent
	@role( event )
	@timestamp( timestamp )
end

declare PairAB
  first: SimpleEvent
  second: SimpleEvent
end

declare PairAC
  first: SimpleEvent
  second: SimpleEvent
end

declare TierABC
  first: SimpleEvent
  second: SimpleEvent
  third: SimpleEvent
end


rule "occurrencies A -> B"
	no-loop
	salience 0
	dialect "java"
	when
		$aEvent : SimpleEvent( this.data == "Event A", this.isConsumed == false);
		$bEvent : SimpleEvent( this.data == "Event B",	this after $aEvent,	this.isConsumed == false, this.getSourceID == $aEvent.getSourceID);
		eval( DroolsUtils.strictlyFollows($aEvent.getSequenceID(), $bEvent.getSequenceID()));		
	then
		
		PairAB p = new PairAB();
   		p.setFirst( $aEvent );
   		p.setSecond( $bEvent );
   		insert(p);
   		
		$aEvent.setConsumed(true);
		$bEvent.setConsumed(true);
		update( $aEvent );
		update( $bEvent );
		retract( $aEvent );
		retract( $bEvent );
end

rule "occurrencies A -> C"
	no-loop
	salience 0
	dialect "java"
	when
		$aEvent : SimpleEvent( this.data == "Event A", this.isConsumed == false);
		$cEvent : SimpleEvent( this.data == "Event C",	this after $aEvent,	this.isConsumed == false, this.getSourceID == $aEvent.getSourceID);
		eval( DroolsUtils.strictlyFollows($aEvent.getSequenceID(), $cEvent.getSequenceID()));		
	then
		
		PairAC p = new PairAC();
   		p.setFirst( $aEvent );
   		p.setSecond( $cEvent );
   		insert(p);
   		
		$aEvent.setConsumed(true);
		$cEvent.setConsumed(true);
		update( $aEvent );
		update( $cEvent );
		retract( $aEvent );
		retract( $cEvent );
end

rule "occurrencies A -> B -> C"
	no-loop
	salience 0
	dialect "java"
	when
		$aEvent : SimpleEvent( this.data == "Event A");
		$bEvent : SimpleEvent( this.data == "Event B",	this after $aEvent,	this.getSourceID == $aEvent.getSourceID);
		$cEvent : SimpleEvent( this.data == "Event C",	this after $bEvent,	this.getSourceID == $bEvent.getSourceID);
		eval( DroolsUtils.strictlyFollows($aEvent.getSequenceID(), $bEvent.getSequenceID(), $cEvent.getSequenceID()));		
	then
		
		TierABC p = new TierABC();
   		p.setFirst( $aEvent );
   		p.setSecond( $bEvent );
   		p.setThird( $cEvent );
   		insert(p);
   		
		$aEvent.setConsumed(true);
		$bEvent.setConsumed(true);
		$cEvent.setConsumed(true);
		update( $aEvent );
		update( $bEvent );
		update( $cEvent );
		retract( $aEvent );
		retract( $bEvent );
		retract( $cEvent );
end

rule "collectDataAndAverage"
	salience 99990
	no-loop
	when
		$listAB : List() from collect(PairAB())
		$listAC : List() from collect(PairAC())
		$listABC: List() from collect(TierABC());
	then
		System.out.println("Strictly-follow-A -> B sequences found: " + $listAB.size());
		System.out.println("Strictly-follow-A -> C sequences found: " + $listAC.size());
		System.out.println("Strictly-follow-A -> B -> C sequences found: " + $listABC.size()); 
		System.out.println("AB pattern chosen " + DroolsUtils.evaluateProb($listAB.size(), $listAB.size() + $listAC.size()) + "% times");
		System.out.println("AC pattern chosen " + DroolsUtils.evaluateProb($listAC.size(), $listAB.size() + $listAC.size()) + "% times");
		DebugMessages.line();
end